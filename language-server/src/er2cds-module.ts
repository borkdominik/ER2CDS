import type { DefaultSharedModuleContext, Module, PartialLangiumServices } from 'langium';
import { createDefaultModule, createDefaultSharedModule, inject } from 'langium';
import { LangiumSprottyServices, LangiumSprottySharedServices, SprottyDiagramServices, SprottySharedModule } from 'langium-sprotty';
import { DefaultElementFilter, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout.js';
import { ER2CDSGeneratedModule, ER2CDSGeneratedSharedModule } from './generated/module.js';
import { ER2CDSValidator, registerValidationChecks } from './er2cds-validator.js';
import { ER2CDSDiagramGenerator } from './er2cds-diagram.js';
import { ER2CDSLayoutConfigurator } from './er2cds-layout.js';

const ElkConstructor = require('elkjs/lib/elk.bundled.js').default;

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ER2CDSAddedServices = {
    validation: {
        ER2CDSValidator: ER2CDSValidator
    },
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ER2CDSServices = LangiumSprottyServices & ER2CDSAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ER2CDSModule: Module<ER2CDSServices, PartialLangiumServices & SprottyDiagramServices & ER2CDSAddedServices> = {
    validation: {
        ER2CDSValidator: () => new ER2CDSValidator()
    },
    diagram: {
        DiagramGenerator: services => new ER2CDSDiagramGenerator(services),
        ModelLayoutEngine: services => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new ER2CDSLayoutConfigurator
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createER2CDSServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    ER2CDS: ER2CDSServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        ER2CDSGeneratedSharedModule,
        SprottySharedModule
    );

    const ER2CDS = inject(
        createDefaultModule({ shared }),
        ER2CDSGeneratedModule,
        ER2CDSModule
    );

    shared.ServiceRegistry.register(ER2CDS);
    registerValidationChecks(ER2CDS);

    return { shared, ER2CDS };
}
