import type { DefaultSharedModuleContext, ExecuteCommandAcceptor, Module, PartialLangiumServices } from 'langium';
import type { DiagramOptions } from 'sprotty-protocol';
import { AbstractExecuteCommandHandler, DefaultRenameProvider, URI, createDefaultModule, createDefaultSharedModule, inject } from 'langium';
import { DefaultDiagramServerManager, DiagramActionNotification, LangiumSprottyServices, LangiumSprottySharedServices, SprottyDiagramServices, SprottySharedServices } from 'langium-sprotty';
import { DefaultElementFilter, DefaultLayoutConfigurator, ElkFactory, ElkLayoutEngine, IElementFilter, ILayoutConfigurator } from 'sprotty-elk/lib/elk-layout.js';
import { ER2CDSGeneratedModule, ER2CDSGeneratedSharedModule } from './generated/module.js';
import { ER2CDSValidator, registerValidationChecks } from './validation/validation.js';
import { ER2CDSDiagramGenerator } from './er2cds-diagram-generator.js';
import { ER2CDSDiagramServer } from './er2cds-diagram-server.js';
import { generateCDS } from './generator/generator.js';
import { ER2CDSScopeProvider } from './er2cds-scope-provider.js';
import { ER2CDSLanguageServer } from './er2cds-language-server.js';

const ElkConstructor = require('elkjs/lib/elk.bundled.js').default;

export namespace ER2CDSGlobal {
    export let sapUrl: string;
    export let sapClient: string;
    export let sapUsername: string;
    export let sapPassword: string;
}

/**
 * Declaration of custom services - add your own service classes here.
 */
export type ER2CDSAddedServices = {
    validation: {
        ER2CDSValidator: ER2CDSValidator
    },
    layout: {
        ElkFactory: ElkFactory,
        ElementFilter: IElementFilter,
        LayoutConfigurator: ILayoutConfigurator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type ER2CDSServices = LangiumSprottyServices & ER2CDSAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const ER2CDSModule: Module<ER2CDSServices, PartialLangiumServices & SprottyDiagramServices & ER2CDSAddedServices> = {
    validation: {
        ER2CDSValidator: (services) => new ER2CDSValidator(services)
    },
    references: {
        ScopeProvider: (services) => new ER2CDSScopeProvider(services),
    },
    diagram: {
        DiagramGenerator: (services: any) => new ER2CDSDiagramGenerator(services),
        ModelLayoutEngine: (services: any) => new ElkLayoutEngine(services.layout.ElkFactory, services.layout.ElementFilter, services.layout.LayoutConfigurator) as any
    },
    layout: {
        ElkFactory: () => () => new ElkConstructor({ algorithms: ['layered'] }),
        ElementFilter: () => new DefaultElementFilter,
        LayoutConfigurator: () => new DefaultLayoutConfigurator
    },
    lsp: {
        RenameProvider: (services) => new DefaultRenameProvider(services)
    }
};

/**
 * Handles VSC extension commands
 */
export class ER2CDSCommandHandler extends AbstractExecuteCommandHandler {
    registerCommands(acceptor: ExecuteCommandAcceptor): void {
        acceptor('er2cds.generate.cds', args => {
            generateCDS(args[0]);
        });

        acceptor('er2cds.add.system', args => {
            ER2CDSGlobal.sapUrl = args[0];
            ER2CDSGlobal.sapClient = args[1];
            ER2CDSGlobal.sapUsername = args[2];
            ER2CDSGlobal.sapPassword = args[3];
        });
    }
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createER2CDSServices(context: DefaultSharedModuleContext): {
    shared: LangiumSprottySharedServices,
    ER2CDS: ER2CDSServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        ER2CDSGeneratedSharedModule,
        ER2CDSSprottySharedModule
    );
    shared.lsp.LanguageServer = new ER2CDSLanguageServer(shared);
    shared.lsp.ExecuteCommandHandler = new ER2CDSCommandHandler();

    const ER2CDS = inject(
        createDefaultModule({ shared }),
        ER2CDSGeneratedModule,
        ER2CDSModule
    );
    shared.ServiceRegistry.register(ER2CDS);

    registerValidationChecks(ER2CDS);

    return { shared, ER2CDS };
}

const ER2CDSDiagramServerFactory = (services: LangiumSprottySharedServices): ((clientId: string, options?: DiagramOptions) => ER2CDSDiagramServer) => {
    const connection = services.lsp.Connection;
    const serviceRegistry = services.ServiceRegistry;

    return (clientId, options) => {
        const sourceUri = options?.sourceUri;

        if (!sourceUri)
            throw new Error("Missing 'sourceUri' option in request.");

        const language = serviceRegistry.getServices(URI.parse(sourceUri as string)) as ER2CDSServices;

        if (!language.diagram)
            throw new Error(`The '${language.LanguageMetaData.languageId}' language does not support diagrams.`);

        return new ER2CDSDiagramServer(async action => { connection?.sendNotification(DiagramActionNotification.type, { clientId, action }); }, language);
    };
};

const ER2CDSSprottySharedModule: Module<LangiumSprottySharedServices, SprottySharedServices> = {
    diagram: {
        diagramServerFactory: ER2CDSDiagramServerFactory,
        DiagramServerManager: (services) => new DefaultDiagramServerManager(services),
    }
};